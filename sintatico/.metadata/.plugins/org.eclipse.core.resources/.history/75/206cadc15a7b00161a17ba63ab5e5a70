package br.uefs.control;
import br.uefs.lib.*;

import java.util.Arrays;
import java.util.LinkedList;
import java.util.Stack;

public class Sintatico {
	
	static Stack<Integer> pilha = new Stack<Integer>();
	static LinkedList<Token> tokens_int = new LinkedList<Token>();
	static LinkedList<Integer> tokens = new LinkedList<Integer>();
	static int[][]_matriz = new int[800][800];
	int i = 0 ;
	
	
	public static void main(String args[])
	{
		new Sintatico().analises();
		
	}
	public void startMatriz()
	{
		// PROGRAMA
		_matriz[Library.nt_programa][Library.tk_programa] = Library.nt_inicio_func; 
		_matriz[Library.nt_programa][Library.tk_var] = Library.nt_inicio_var_func; 
		_matriz[Library.nt_programa][Library.tk_const] = Library.nt_inicio_const_var_func;
		_matriz[Library.nt_programa][Library.tk_funcao] = Library.nt_inicio_func; 
		//DEC_CONST
		_matriz[Library.nt_dec_const][Library.tk_const] = Library.nt_dec_const; 
		_matriz[Library.nt_dec_const_continuo][Library.tk_inteiro] = Library.nt_dec_const_continuo; 
		_matriz[Library.nt_dec_const_continuo][Library.tk_booleano] = Library.nt_dec_const_continuo; 
		_matriz[Library.nt_dec_const_continuo][Library.tk_cadeia] = Library.nt_dec_const_continuo;
		_matriz[Library.nt_dec_const_continuo][Library.tk_real] = Library.nt_dec_const_continuo; 
		_matriz[Library.nt_dec_const_continuo][Library.tk_caractere] = Library.nt_dec_const_continuo; 
		// TIPO N
		_matriz[Library.nt_tipo_n][Library.tk_inteiro] = Library.nt_tipo_c1; 
		_matriz[Library.nt_tipo_n][Library.tk_booleano] = Library.nt_tipo_c3; 
		_matriz[Library.nt_tipo_n][Library.tk_cadeia] = Library.nt_tipo_c4;
		_matriz[Library.nt_tipo_n][Library.tk_real] = Library.nt_tipo_c2; 
		_matriz[Library.nt_tipo_n][Library.tk_caractere] = Library.nt_tipo_c5; 
		//DEC_CONST_1
		Arrays.fill(_matriz[Library.nt_dec_const_i], Library.nt_epsilon);
		_matriz[Library.nt_dec_const_i][Library.tk_virgula] = Library.nt_dec_const_i; 
		//DEC_CONST_2
		Arrays.fill(_matriz[Library.nt_dec_const_ii], Library.nt_epsilon);
		_matriz[Library.nt_dec_const_ii][Library.tk_inteiro] = Library.nt_dec_const_ii; 
		_matriz[Library.nt_dec_const_ii][Library.tk_booleano] = Library.nt_dec_const_ii; 
		_matriz[Library.nt_dec_const_ii][Library.tk_cadeia] = Library.nt_dec_const_ii;
		_matriz[Library.nt_dec_const_ii][Library.tk_real] = Library.nt_dec_const_ii; 
		_matriz[Library.nt_dec_const_ii][Library.tk_caractere] = Library.nt_dec_const_ii; 
		// DEC_CONST_VAR_DERIVADA
		_matriz[Library.nt_dec_const_var_derivada][Library.tk_var] = Library.nt_dec_const_var_derivada_c1; 
		_matriz[Library.nt_dec_const_var_derivada][Library.tk_funcao] = Library.nt_dec_const_var_derivada_c2; 
		_matriz[Library.nt_dec_const_var_derivada][Library.tk_programa] = Library.nt_dec_const_var_derivada_c2; 
		//DEC_VAR
		_matriz[Library.nt_dec_var][Library.tk_var] = Library.nt_dec_var; 
		_matriz[Library.nt_dec_var_continuo][Library.tk_inteiro] = Library.nt_dec_var_continuo; 
		_matriz[Library.nt_dec_var_continuo][Library.tk_booleano] = Library.nt_dec_var_continuo; 
		_matriz[Library.nt_dec_var_continuo][Library.tk_cadeia] = Library.nt_dec_var_continuo;
		_matriz[Library.nt_dec_var_continuo][Library.tk_real] = Library.nt_dec_var_continuo; 
		_matriz[Library.nt_dec_var_continuo][Library.tk_caractere] = Library.nt_dec_var_continuo; 
		// DEC_VAR_I
		Arrays.fill(_matriz[Library.nt_dec_var_i], Library.nt_epsilon);
		_matriz[Library.nt_dec_var_i][Library.tk_virgula] = Library.nt_dec_var_i; 
		// DEC_VAR_II
		Arrays.fill(_matriz[Library.nt_dec_var_ii], Library.nt_epsilon);
		_matriz[Library.nt_dec_var_ii][Library.tk_inteiro] = Library.nt_dec_var_ii; 
		_matriz[Library.nt_dec_var_ii][Library.tk_booleano] = Library.nt_dec_var_ii; 
		_matriz[Library.nt_dec_var_ii][Library.tk_cadeia] = Library.nt_dec_var_ii;
		_matriz[Library.nt_dec_var_ii][Library.tk_real] = Library.nt_dec_var_ii; 
		_matriz[Library.nt_dec_var_ii][Library.tk_caractere] = Library.nt_dec_var_ii; 
		// ARRAY
		Arrays.fill(_matriz[Library.nt_array], Library.nt_epsilon);
		_matriz[Library.nt_array][Library.tk_menor] = Library.nt_array; 
		// ARRAY INDEX
		Arrays.fill(_matriz[Library.nt_array_indexes], Library.nt_exp_simples);
		// ARRAY_I
		Arrays.fill(_matriz[Library.nt_array_i], Library.nt_epsilon);
		_matriz[Library.nt_array_i][Library.tk_virgula] = Library.nt_array_i; 
		//
	}
	public void analises()
	{
		pilha.push(Library.tk_dolar);
		pilha.push(Library.nt_programa);
		
		startMatriz();
		int valor;
		while(true){
			valor = pilha.peek();
			if(valor == Library.tk_dolar && tokens.isEmpty())
				Debuger.sysPrint("Sucess\n");
			else if(pilha.isEmpty())
				Debuger.sysPrint("Empty\n");
			else if(pilha.isEmpty() && tokens.size() != 0)
				Debuger.sysPrint("Error\n");
			else if(valor == Library.tk_dolar)
				Debuger.sysPrint("Sucess\n");
			
			else if (valor == tokenAtualId())
			{
				consumirToken();
				pilha.pop();
				Debuger.sysPrint("Consumir: "+valor);
			}
			else if(valor >= 44 && valor <= 200)
			{
				
				gerarProducao(valor);
				Debuger.sysPrint("gerar: "+valor);
			}
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			
		}
	}

	private void consumirToken() {
		i++;
	}

	private int tokenAtualId(){	
		if(i >= tokens.size())
		{ 
			return Library.tk_dolar;
		}
		Integer aux = tokens.get(i);
		return get_token_id(aux);
	}

	private int get_token_id(Integer aux) {
		
		return aux;
	}
	
	
	private int gerarProducao(int nt)
	{
		int nt_x = _matriz[nt][tokenAtualId()];
		pilha.pop();
		switch(nt_x)
		{
		case Library.nt_inicio_const_var_func:
			pilha.push(Library.nt_dec_const_var_derivada);
			pilha.push(Library.nt_dec_const);
			break;
		case Library.nt_inicio_func:
			// <Decl_Func> <Decl_Main>
			pilha.push(Library.nt_dec_main);
			pilha.push(Library.nt_dec_func);
			break;
		case Library.nt_inicio_var_func:
			//<Decl_Var> <Decl_Func> <Decl_Main>
			pilha.push(Library.nt_dec_main);
			pilha.push(Library.nt_dec_func);
			pilha.push(Library.nt_dec_var);
			break;
			//'const' 'inicio' <Decl_Const_Continuo> 'fim'
		case Library.nt_dec_const:
			pilha.push(Library.tk_fim);
			pilha.push(Library.nt_dec_const_continuo);
			pilha.push(Library.tk_inicio);
			pilha.push(Library.tk_const);
			break;
		case Library.nt_dec_const_i:
			//',' Identificador '=' <Expr_Relacional_Booleana> <Decl_Const_I> | 
			pilha.push(Library.nt_dec_const_i);
			pilha.push(Library.nt_exp_relacional_bool); 
			pilha.push(Library.tk_igual);
			pilha.push(Library.tk_identificador);
			pilha.push(Library.tk_virgula);
			break;
		case Library.nt_dec_const_continuo:
			//Tipo Identificador '=' <Expr_Relacional_Booleana> <Decl_Const_I> ';' <Decl_Const_II>
			pilha.push(Library.nt_dec_const_ii);
			pilha.push(Library.tk_pontoevirgula);
			pilha.push(Library.nt_dec_const_i);
			pilha.push(Library.nt_exp_relacional_bool);
			pilha.push(Library.tk_igual);
			pilha.push(Library.tk_identificador);
			pilha.push(Library.nt_tipo_n);
			break;
		case Library.nt_dec_const_ii:
			//Tipo Identificador '=' <Expr_Relacional_Booleana> <Decl_Const_I> ';' <Decl_Const_II> |
			pilha.push(Library.nt_dec_const_ii);
			pilha.push(Library.tk_pontoevirgula);
			pilha.push(Library.nt_dec_const_i);
			pilha.push(Library.nt_exp_relacional_bool); 
			pilha.push(Library.tk_igual);
			pilha.push(Library.tk_identificador);
			pilha.push(Library.nt_tipo_n);
			break;
		case Library.nt_dec_const_var_derivada_c1:
			//<Decl_Var> <Decl_Func> <Decl_Main> 
			pilha.push(Library.nt_dec_main);
			pilha.push(Library.nt_dec_func);
			pilha.push(Library.nt_dec_var);
			break;
		case Library.nt_dec_const_var_derivada_c2:
			//<Decl_Func> <Decl_Main>
			pilha.push(Library.nt_dec_main);
			pilha.push(Library.nt_dec_func);
			break;
		case Library.nt_dec_var:
			//'var' 'inicio' <Decl_Var_Continuo> 'fim'
			pilha.push(Library.tk_fim);
			pilha.push(Library.nt_dec_var_continuo);
			pilha.push(Library.tk_inicio);
			pilha.push(Library.tk_var);
			break;
		case Library.nt_dec_var_continuo:
			//Tipo <Array> Identificador <Decl_Var_I> ';' <Decl_Var_II>
			pilha.push(Library.nt_dec_var_ii);
			pilha.push(Library.tk_pontoevirgula);
			pilha.push(Library.nt_dec_var_i);			
			pilha.push(Library.tk_identificador);
			pilha.push(Library.nt_array);
			pilha.push(Library.nt_tipo_n);
			break;
		case Library.nt_dec_var_i:
			//',' <Array> Identificador <Decl_Var_I> 
			pilha.push(Library.nt_dec_var_i);
			pilha.push(Library.tk_identificador);
			pilha.push(Library.nt_array);
			pilha.push(Library.tk_virgula);
			break;
		case Library.nt_dec_var_ii:
			// Tipo <Array> Identificador <Decl_Var_I> ';' <Decl_Var_II> | 
			pilha.push(Library.nt_dec_var_ii);
			pilha.push(Library.tk_pontoevirgula);
			pilha.push(Library.nt_dec_var_i);			
			pilha.push(Library.tk_identificador);
			pilha.push(Library.nt_array);
			pilha.push(Library.nt_tipo_n);
			break;
		case Library.nt_array:
			 pilha.push(Library.tk_maior);
			 pilha.push(Library.tk_maior);
			 pilha.push(Library.nt_array_i);
			 pilha.push(Library.nt_array_indexes);
			 pilha.push(Library.tk_menor);
             pilha.push(Library.tk_menor);
			break;
		case Library.nt_array_indexes:
			pilha.push(Library.nt_exp_simples);
			break;
		case Library.nt_array_i:
			pilha.push(Library.nt_array_i);
			pilha.push(Library.nt_array_indexes);
			pilha.push(Library.tk_virgula);
			break;
		case Library.nt_exp_relacional_bool:
			// <Expr_Conjunta> <Expr_Conjunta_I>
			break;
		
			
			
		case Library.nt_tipo_c1:
			pilha.push(Library.tk_inteiro);
			break;
		case Library.nt_tipo_c2:
			pilha.push(Library.tk_real);
			break;
		case Library.nt_tipo_c3:
			pilha.push(Library.tk_booleano);
			break;
		case Library.nt_tipo_c4:
			pilha.push(Library.tk_cadeia);
			break;
		case Library.nt_tipo_c5:
			pilha.push(Library.tk_caractere);
			break;
			
			
			
		/*
			
			
			case Library.nt_array_indexes_opt:
				pilha.push(Library.nt_array_indexes);
				break;
			case Library.nt_array_indexes_opt_c2://TODO
				break;
			case Library.nt_array_param:
				 pilha.push(Library.tk_maior);
				 pilha.push(Library.tk_maior);
				 pilha.push(Library.nt_array_i);
				 pilha.push(Library.nt_array_indexes_opt);
				 pilha.push(Library.tk_menor);
	             pilha.push(Library.tk_menor);
				break;
			case Library.nt_array_param_c2://TODO
				break;
			case Library.nt_array_param_i:
				 pilha.push(Library.nt_array_i);
				 pilha.push(Library.nt_array_indexes_opt);
				 pilha.push(Library.tk_virgula);
				break;
			case Library.nt_array_param_i_c2://TODO
				break;
			case Library.nt_chama_ou_atribui:
				pilha.push(Library.nt_whos_next);
				pilha.push(Library.tk_identificador);
				break;
			case Library.nt_chama_ou_atribui_c2:  //TODO
				break;
			case Library.nt_comandos://TODO
				break;
			case Library.nt_comandos_c2://TODO
				break;
			case Library.nt_comandos_c3://TODO
				break;
			case Library.nt_comandos_c4://TODO
				break;
			case Library.nt_comandos_c5://TODO
				break;
			case Library.nt_comandos_c6://TODO
				break;
			case Library.nt_comandos_c7://TODO
				break;
			case Library.nt_corpo: // TODO 
				pilha.push(Library.nt_corpo);
				pilha.push(Library.nt_comandos);
				break;
			case Library.nt_corpo_c2: // TODO 
				break;
			case Library.nt_dec_const:// TODO 
				break;
			case Library.nt_dec_const_continuo:
				break;
			case Library.nt_dec_const_i:
				break;
			case Library.nt_dec_const_i_c2:
				break;
			case Library.nt_dec_const_ii:
				break;
			case Library.nt_dec_const_ii_c2:
				break;
			case Library.nt_dec_const_var_derivada:
				break;
			
			case Library.nt_dec_enquanto:
				break;
			case Library.nt_dec_escrita:
				break;
			case Library.nt_dec_func:
				break;
			case Library.nt_dec_func_c2:
				break;
			case Library.nt_dec_func_i:
				break;
			case Library.nt_dec_func_i_c2:
				break;
			case Library.nt_dec_leitura:
				break;
			case Library.nt_dec_main:
				break;
			case Library.nt_dec_se:
				break;
			
			case Library.nt_dec_var_continuo:
				break;
			
			
			case Library.nt_dec_var_i_c2:
				break;
			
			case Library.nt_dec_var_ii_c2:
				break;
			case Library.nt_else_opc:
				break;
			case Library.nt_else_opc_c2:
				break;
			case Library.nt_escrevivel:
				break;
			case Library.nt_escrevivel_c2:
				break;
			case Library.nt_escrevivel_i:
				break;
			case Library.nt_escrevivel_i_c2:
				break;
			case Library.nt_exp_conjunta:
				break;
			case Library.nt_exp_conjunta_i:
				break;
			case Library.nt_exp_conjunta_i_c2:
				break;
			case Library.nt_exp_relacional:
				break;
			
			case Library.nt_exp_relacional_i:
				break;
			case Library.nt_exp_relacional_i_c2:
				break;
			case Library.nt_exp_simples:
				break;
			case Library.nt_exp_simples_c2:
				break;
			case Library.nt_fator:
				break;
			case Library.nt_fator_c2:
				break;
			case Library.nt_fator_c3:
				break;
			case Library.nt_fator_c4:
				break;
			case Library.nt_fator_c5:
				break;
			case Library.nt_fator_c6:
				break;
			case Library.nt_fator_c7:
				break;
			case Library.nt_fator_e:
				break;
			case Library.nt_fator_e_c2:
				break;
			case Library.nt_fator_e_c3:
				break;
			case Library.nt_fator_e_c4:
				break;
			case Library.nt_fator_e_c5:
				
				break;
			case Library.nt_fator_i:
				break;
			case Library.nt_fator_i_c2:
				break;
			case Library.nt_fator_i_e:
				break;
			case Library.nt_fator_i_e_c2:
				break;
			case Library.nt_id_funcao_e_outros:
				break;
			case Library.nt_id_funcao_e_outros_c2:
				break;
			case Library.nt_id_funcao_e_outros_derivado:
				break;
			case Library.nt_inicio_const_var_func:
				break;
			case Library.nt_inicio_func:
				pilha.push(Library.nt_dec_main);
				pilha.push(Library.nt_dec_func);
				break;
			case Library.nt_leitura_i:
				break;
			case Library.nt_leitura_i_c2:
				break;
			case Library.nt_not_opc:
				break;
			case Library.nt_not_opc_c2:
				break;
			case Library.nt_novo_escopo:
				break;
			case Library.nt_op_mais_menos:
				break;
			case Library.nt_op_mais_menos_c2:
				break;	
			case Library.nt_op_multi_div:
				break;
			case Library.nt_op_multi_div_c2:
				break;
			case Library.nt_op_relacional:
				break;
			case Library.nt_op_relacional_c2:
				break;	
			case Library.nt_op_relacional_c3:
				break;
			case Library.nt_op_relacional_c4:
				break;
			case Library.nt_op_relacional_c5:
				break;
			case Library.nt_operar_relacionalmente:
				break;
			case Library.nt_operar_relacionalmente_c2:
				break;	
			case Library.nt_parametros:
				break;
			case Library.nt_parametros_c2://TODO
				break;
			case Library.nt_parametros_i:
				break;
			case Library.nt_passa_param_i_c2:
				break;
			case Library.nt_possible_func:
				break;
			case Library.nt_possible_func_c2:
				break;
			case Library.nt_programa:
				pilha.push(Library.nt_inicio_const_var_func);
				break;
			case Library.nt_programa_c2:
				pilha.push(Library.nt_inicio_var_func);
				break;
			case Library.nt_programa_c3:
				pilha.push(Library.nt_inicio_func);
				break;
			case Library.nt_retorno_func:
				break;
			case Library.nt_termo: // TODO
				break;
			case Library.nt_termo_e:
				pilha.push(Library.nt_fator_i_e);
				pilha.push(Library.nt_fator_e);
				break;
			case Library.nt_termo_i: // TODO
				break;
			case Library.nt_termo_i_c2:
				break;
			case Library.nt_termo_i_e:
				pilha.push(Library.nt_fator_i_e);
				pilha.push(Library.nt_fator_e);
				pilha.push(Library.nt_op_mais_menos);
				break;
			case Library.nt_termo_i_e_c2:
				break;
			
			case Library.nt_whos_next:
				pilha.push(Library.tk_pontoevirgula);
				pilha.push(Library.tk_fechar_parentese);
				pilha.push(Library.nt_passa_param);
				pilha.push(Library.tk_abrir_parentese);
				break;
			case Library.nt_whos_next_c2:
				break;
				*/
			case Library.nt_epsilon:
				break;
			
			default:
				pilha.push(nt);
				return -1;
				
		}
		return 0;
	}
	
}